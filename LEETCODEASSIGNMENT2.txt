
LEETCODE ASSIGNMENT 2

1. Longest Common Prefix

 class Solution {
    public String longestCommonPrefix(String[] strs) {
        if(strs[0].equals(""))
        {
            return "";
        }

        String s=strs[0];
        int o=Integer.MAX_VALUE;
        for(int i=1;i<strs.length;i++)
        {
           int j=0;int k=0;
           if(strs[i]=="")
           {
            return "";
           }
          while(j<s.length() && j<strs[i].length())
          {
            if(s.charAt(j)==strs[i].charAt(j))
            {
                k++;
            }else{
                break;
            }
          j++;
       
          }
          if(k==0)
          {
            return "";
          }
          System.out.println(k);
          o=Math.min(o,k);
 System.out.println(o);
          
        }

        if(o==Integer.MAX_VALUE)
        {
            o=1;
        }
        
      return s.substring(0,o);
        
    }
}

2.Find the Index of the First Occurrence in a String

class Solution {
    public int strStr(String haystack, String needle) {
        
        for(int i=0;i<haystack.length();i++)
        {
            int j=0;int k=0;
            if(haystack.charAt(i)==needle.charAt(j))
            {
             k=i;
            while(k<haystack.length() && j<needle.length() && haystack.charAt(k)==needle.charAt(j) )
            {
                k++;
                j++;
                System.out.println(j);
             
            }
            }
            if (j==needle.length())
            {
             return i;
            }
        }
        return -1;
    }
}

3. First Unique Character in a String




class Solution {
    public int firstUniqChar(String s) {
        int[] freq=new int[26];

        for(int i=0;i<s.length();i++)
        {
            freq[s.charAt(i)-'a']++;
        }
        char c='a';
         for(int i=0;i<s.length();i++)
         {
            if(freq[s.charAt(i)-'a']==1)
            {
                return i;
            }
         }
       
       return -1;

    }
}

4.Sort Array by Increasing Frequency

 class Solution {
    public int[] frequencySort(int[] nums) {
       int[] freq=new int[201]; 
     int result [] = new int[nums.length];
      for(int num:nums)
      {
       if(num<0)
       {
        
        freq[100+Math.abs(num)]++;
       
       }else{
        freq[num]++;
     
       }
       
        int index=0;
        for(int i =1; i<=nums.length; i++){
            for(int j =100;j>=0;j--){
                if(freq[j]==i){
                    int times = i;
                    while(times>0){
                        result[index++]=j;
                        times--;
                    }
                }
            }
            for(int j =101;j<201;j++){
                if(freq[j]==i){
                    int times = i;
                    while(times>0){
                        result[index++]=100-j;
                        times--;
                    }
                }
            }
        }
       
    }
     return result;
}}

5.Relative Sort Array


class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
      
        Map<Integer, Integer> count = new HashMap<>();
        for (int num : arr1) {
            count.put(num, count.getOrDefault(num, 0) + 1);
        }
        
        int index = 0;
        
        
        for (int num : arr2) {
            while (count.get(num) > 0) {
                arr1[index++] = num;
                count.put(num, count.get(num) - 1);
            }
            count.remove(num);
        }
        
       
        List<Integer> remaining = new ArrayList<>(count.keySet());
        Collections.sort(remaining);
        
        for (int num : remaining) {
            while (count.get(num) > 0) {
                arr1[index++] = num;
                count.put(num, count.get(num) - 1);
            }
        }
        
        return arr1;
    }
}

6.Sort Array By Parity II

class Solution {
    public int[] sortArrayByParityII(int[] nums) {
       
        int even = 0, odd = 1;
        int[] res = new int[nums.length];
        
        for (int num : nums) {
            if (num % 2 == 0) {

                res[even] = num;
                even += 2;
            } else {
                res[odd] = num;
                odd += 2;
            }
        }
        
        return res;
    }
}
    
7.Regular Expression Matching

class Solution {
    Boolean[][] dp;
    public boolean isMatch(String s, String p) {
        dp=new Boolean[s.length()+1][p.length()+1];
        return dp(0,0,s,p);
        
   
}

    boolean dp(int i,int j,String s,String p)
    {
        if(dp[i][j]!=null)
        {
            return dp[i][j];
        }
        boolean ans;
        if(j==p.length())
        {
            ans=(i==s.length());
        }else{
        
        boolean match=(i<s.length() &&(p.charAt(j)=='.' || s.charAt(i)==p.charAt(j)));
        
        if(j+1<p.length() && p.charAt(j+1)=='*' )
        {
           ans=(dp(i,j+2,s,p)||(match && dp(i+1,j,s,p)));
        }else{
           ans=( match && dp(i+1,j+1,s,p));
        }
        }
        dp[i][j]=ans;
        return ans;
    }
}

8.Integer to Roman

class Solution {
    public String intToRoman(int num) {
    
  
        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        String[] symbols = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
        
        StringBuilder result = new StringBuilder();
        
        for (int i = 0; i < values.length; i++) {
          
            while (num >= values[i]) {
                
                result.append(symbols[i]);
                num -= values[i];
            }
        }
        
        return result.toString();
    }
}
 

9.Roman to Integer

class Solution {
    public int romanToInt(String s) {
        

        Map<Character, Integer> romanMap = new HashMap<>();

        romanMap.put('I', 1);
        romanMap.put('V', 5);
        romanMap.put('X', 10);
        romanMap.put('L', 50);
        romanMap.put('C', 100);
        romanMap.put('D', 500);
        romanMap.put('M', 1000);
        
        int res = 0;
        
        for (int i = 0; i < s.length(); i++) {

            int current = romanMap.get(s.charAt(i));
            
           
            if (i + 1 < s.length() && current < romanMap.get(s.charAt(i + 1))) {

                res -= current;
            } else {
                res += current;
            }
        }
        
        return res;
    }}
    
